
services:
  prometheus-test:
    image: prom/prometheus:v2.47.0
    container_name: prometheus-test
    ports:
      - "9090:9090"
    volumes:
      - ./data/monitor/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    restart: always

  grafana-test:
    image: grafana/grafana:10.1.5
    container_name: grafana-test
    ports:
      - "3000:3000"
    volumes:
      - ./data/monitor/grafana/data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    restart: always
    
  redis-test:
    image: redis:7.2-alpine  # 使用官方 Redis 镜像
    container_name: redis-test
    ports:
      - "6379:6379"  # 映射 Redis 默认端口
    volumes:
      - ./data/redis/volumes:/data  # 持久化存储数据
    command: redis-server --appendonly yes  # 启用 AOF 持久化
    restart: always  # 容器自动重启

  mysql-test:
    image: registry.cn-hangzhou.aliyuncs.com/bigdata_cloudnative/mysql-test:5.7
    restart: always
    container_name: mysql-test
    hostname: mysql-test
    environment:
      MYSQL_ROOT_PASSWORD: 123456
      TZ: Asia/Shanghai
    ports:
      - 3306:3306
    volumes:
      - ./data/mysql/volumes:/var/lib/mysql
      - ./data/mysql/my.cnf:/etc/mysql/my.cnf
      - ./data/mysql/initSql:/docker-entrypoint-initdb.d
    command:
      --max_connections=1000
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_general_ci
      --default-authentication-plugin=mysql_native_password
    healthcheck:
      test: ["CMD-SHELL", "curl --silent localhost:3306 >/dev/null || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 3


  etcdService:
    image: bitnami/etcd:3.6.1
    container_name: etcd
    ports:
      - 2379:2379
      - 2380:2380
    environment:
      # 允许无认证启动
      - ALLOW_NONE_AUTHENTICATION=yes
      # 向客户端通告的URL
      - ETCD_ADVERTISE_CLIENT_URLS=http://0.0.0.0:2379
      # 监听客户端连接的地址
      - ETCD_LISTEN_CLIENT_URLS=http://0.0.0.0:2379 
    # 添加重启策略
    restart: always
    # networks:
    #   - app_network
    # volumes:
    #   - ./etcd/data.txt:/data.txt  # 挂载包含键值对的文件
    # command: >
    #   sh -c "
    #     sleep 5 &&
    #     # 从文件导入所有键值对
    #     etcdctl --endpoints=http://localhost:2379 put '/service/comet/v1.0.0/config' '{\"TrafficTags\":[\"default\"],\"DepServices\":[\"auth\"]}' &&
    #     etcdctl --endpoints=http://localhost:2379 put '/service/auth/v1.0.0/config' '{\"TrafficTags\":[\"default\"],\"DepServices\":[\"\"]}' &&
    #     /opt/bitnami/scripts/etcd/run.sh
    #   "

  auth:
    build:
      context: .
      dockerfile: ./src/Auth/Dockerfile  # 指定自定义Dockerfile文件名
    ports:
      - "8080:8080"
    depends_on:
      - etcdService
    restart: always
    networks:
      - default

  comet:
    build:
      context: .
      dockerfile: ./src/Comet/Dockerfile  # 指定自定义Dockerfile文件名
    ports:
      - "8181:8181"
    depends_on:
      - etcdService
    restart: always
    networks:
      - default

volumes:
  redis-data:  # 定义数据卷

networks:
  app_network:
    driver: bridge
